name: Transcribe audio to text (Whisper.cpp, nightly)

on:
  workflow_dispatch: {}
  schedule:
    # 04:00 UTC = 22:00 México/Monterrey
    - cron: "0 4 * * *"

jobs:
  transcribe:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show env
        run: |
          echo "Transcripción nocturna con whisper.cpp (small, español)."

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install ffmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg
          node -v
          npm -v
          ffmpeg -version | head -n 1
          ffprobe -version | head -n 1

      - name: Install build deps (toolchain)
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential git curl ca-certificates

      # Cache del modelo para acelerar corridas
      - name: Cache whisper model
        id: cache-whisper-model
        uses: actions/cache@v4
        with:
          path: whisper.cpp/models/ggml-small.bin
          key: whisper-model-small-v1

      - name: Clone & build whisper.cpp (preferir whisper-cli)
        run: |
          set -euxo pipefail

          # Reclonar si quedó un dir sin fuentes (cache huérfano)
          if [ -d whisper.cpp ] && [ ! -f whisper.cpp/CMakeLists.txt ]; then
            rm -rf whisper.cpp
          fi

          # Clonar si no existe
          if [ ! -d whisper.cpp ]; then
            git clone --depth=1 https://github.com/ggerganov/whisper.cpp.git
          fi

          cd whisper.cpp
          mkdir -p models

          # Descargar modelo 'small' con reintentos y fallback
          if [ ! -f models/ggml-small.bin ]; then
            echo "Descargando ggml-small.bin …"
            (curl -L --retry 5 --retry-delay 5 -o models/ggml-small.bin \
              https://huggingface.co/ggerganov/whisper.cpp/resolve/main/ggml-small.bin) \
              || (echo "HuggingFace falló, intento mirror…" && \
                  curl -L --retry 5 --retry-delay 5 -o models/ggml-small.bin \
                  https://github.com/ggerganov/whisper.cpp/releases/download/v1.5.5/ggml-small.bin)
          fi

          # Compilar a ./build
          cmake -B build -DCMAKE_BUILD_TYPE=Release
          cmake --build build --config Release -j2

          # Preferir whisper-cli; si no, usar main como fallback
          if [ -f build/bin/whisper-cli ]; then
            echo "WHISPER_BIN=./whisper.cpp/build/bin/whisper-cli" >> $GITHUB_ENV
          elif [ -f build/bin/main ]; then
            echo "WHISPER_BIN=./whisper.cpp/build/bin/main" >> $GITHUB_ENV
          else
            echo "No se encontró ni whisper-cli ni main en build/bin:"
            ls -R build || true
            exit 1
          fi

          # Exportar LD_LIBRARY_PATH para que encuentre las .so
          echo "LD_LIBRARY_PATH=./whisper.cpp/build:./whisper.cpp/build/bin" >> $GITHUB_ENV
          echo "WHISPER_MODEL=./whisper.cpp/models/ggml-small.bin" >> $GITHUB_ENV
          cd ..

      - name: Confirm whisper bin & model
        run: |
          echo "WHISPER_BIN=${WHISPER_BIN}"
          echo "WHISPER_MODEL=${WHISPER_MODEL}"
          ls -lh "${WHISPER_BIN}" "${WHISPER_MODEL}"
          "${WHISPER_BIN}" -h | head -n 20 || true

      - name: Install Node deps (repo)
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm i --no-fund --no-audit
          fi

      - name: Peek candidates (debug)
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          SUPABASE_BUCKET: audios
          SUPABASE_TABLE: recordings
          TRANSCRIPT_COLUMN: transcript
          APPROVED_ONLY: "true"
        run: node scripts/peek-transcripts.mjs

      - name: Run transcription (batch 30, lang=es, mark bad)
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          SUPABASE_BUCKET: audios
          SUPABASE_TABLE: recordings
          BATCH_LIMIT: "30"
          LANGUAGE: "es"
          MARK_BAD: "true"
          DRY_RUN: "false"
          TRANSCRIPT_COLUMN: "transcript"
          WHISPER_BIN: ${{ env.WHISPER_BIN }}
          WHISPER_MODEL: ${{ env.WHISPER_MODEL }}
          LD_LIBRARY_PATH: ${{ env.LD_LIBRARY_PATH }}
        run: node scripts/transcribe.mjs
